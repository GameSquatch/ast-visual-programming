'use strict';

var svelte = require('@testing-library/svelte');
var internal = require('svelte/internal');
var chai = require('chai');

/* src/components/Header.svelte generated by Svelte v3.46.4 */

const file = "src/components/Header.svelte";

function create_fragment(ctx) {
	let div;
	let h1;

	const block = {
		c: function create() {
			div = internal.element("div");
			h1 = internal.element("h1");
			h1.textContent = `${headerText}`;
			internal.add_location(h1, file, 5, 4, 78);
			internal.attr_dev(div, "class", "header svelte-1w1jjle");
			internal.add_location(div, file, 4, 0, 53);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			internal.insert_dev(target, div, anchor);
			internal.append_dev(div, h1);
		},
		p: internal.noop,
		i: internal.noop,
		o: internal.noop,
		d: function destroy(detaching) {
			if (detaching) internal.detach_dev(div);
		}
	};

	internal.dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const headerText = "Z-Flow";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	internal.validate_slots('Header', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ headerText });
	return [];
}

class Header extends internal.SvelteComponentDev {
	constructor(options) {
		super(options);
		internal.init(this, options, instance, create_fragment, internal.safe_not_equal, {});

		internal.dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Header",
			options,
			id: create_fragment.name
		});
	}
}

suite('testing', function() {
    test('it works?', function() {
        const { getByText } = svelte.render(Header);

        chai.assert.isNotNull(getByText("Z-Flow"));
    });
});
